{"dependencies":[{"id":"dart.core","name":"dart:core","children":[{"id":"Object","name":"Object","children":[{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"==1()","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"kind":"method","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","line":"29"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","comment":"\nReturns a string representation of this object.\n","line":"48"},{"id":"noSuchMethod1()","name":"noSuchMethod","children":[{"ref":{"name":"InvocationMirror","refId":"dart.core/InvocationMirror"},"id":"invocation","name":"invocation","kind":"param"}],"kind":"method","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [InvocationMirror].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"hashCode","name":"hashCode","kind":"property","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"43"},{"ref":{"name":"Type","refId":"dart.core/Type"},"id":"runtimeType","name":"runtimeType","kind":"property","comment":"\nA representation of the runtime type of the object.\n","line":"65"},{"id":"Object0()","name":"Object","kind":"constructor","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"file:///usr/local/google/home/amouravski/dart-integration/dart-sdk//lib/core/object.dart","kind":"class","comment":"\nEverything in Dart is an [Object].\n","line":"10"}],"uri":"file:///usr/local/google/home/amouravski/dart-integration/dart-sdk//lib/core/core.dart","kind":"library","line":"5"}],"id":"args.src.usage","name":"package:args/src/usage.dart","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"id":"padRight2()","name":"padRight","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"source","name":"source","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"}],"kind":"method","comment":"Pads [source] to [length] by adding spaces at the end. ","line":"229"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Usage","name":"Usage","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"id":"generate0()","name":"generate","kind":"method","comment":"\nGenerates a string displaying usage information for the defined options.\nThis is basically the help text shown on the command line.\n","line":"64"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"getAbbreviation1()","name":"getAbbreviation","children":[{"ref":{"name":"Option","refId":"args/Option"},"id":"option","name":"option","kind":"param"}],"kind":"method","line":"104"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"getLongOption1()","name":"getLongOption","children":[{"ref":{"name":"Option","refId":"args/Option"},"id":"option","name":"option","kind":"param"}],"kind":"method","line":"112"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"getAllowedTitle1()","name":"getAllowedTitle","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"allowed","name":"allowed","kind":"param"}],"kind":"method","line":"120"},{"returnType":{"name":"void","refId":"void"},"id":"calculateColumnWidths0()","name":"calculateColumnWidths","kind":"method","line":"124"},{"id":"newline0()","name":"newline","kind":"method","line":"147"},{"id":"write2()","name":"write","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"column","name":"column","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"text","name":"text","kind":"param"}],"kind":"method","line":"153"},{"id":"writeLine2()","name":"writeLine","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"column","name":"column","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"text","name":"text","kind":"param"}],"kind":"method","line":"170"},{"id":"buildAllowedList1()","name":"buildAllowedList","children":[{"ref":{"name":"Option","refId":"args/Option"},"id":"option","name":"option","kind":"param"}],"kind":"method","line":"211"},{"isStatic":true,"id":"NUM_COLUMNS","name":"NUM_COLUMNS","kind":"variable","line":"23"},{"isFinal":true,"ref":{"name":"ArgParser","refId":"args/ArgParser"},"id":"args","name":"args","kind":"variable","comment":"The parser this is generating usage for. ","line":"26"},{"ref":{"name":"StringBuffer","refId":"dart.core/StringBuffer"},"id":"buffer","name":"buffer","kind":"variable","comment":"The working buffer for the generated usage text. ","line":"29"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"currentColumn","name":"currentColumn","kind":"variable","comment":"\nThe column that the \"cursor\" is currently on. If the next call to\n[write()] is not for this column, it will correctly handle advancing to\nthe next column (and possibly the next row).\n","line":"36"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"columnWidths","name":"columnWidths","kind":"variable","comment":"The width in characters of each column. ","line":"39"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"numHelpLines","name":"numHelpLines","kind":"variable","comment":"\nThe number of sequential lines of text that have been written to the last\ncolumn (which shows help info). We track this so that help text that spans\nmultiple lines can be padded with a blank line after it for separation.\nMeanwhile, sequential options with single-line help will be compacted next\nto each other.\n","line":"48"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"newlinesNeeded","name":"newlinesNeeded","kind":"variable","comment":"\nHow many newlines need to be rendered before the next bit of text can be\nwritten. We do this lazily so that the last bit of usage doesn't have\ndangling newlines. We only write newlines right *before* we write some\nreal content.\n","line":"56"},{"id":"Usage1()","name":"Usage","children":[{"initializedField":{"name":"args","refId":"args.src.usage/Usage/args"},"ref":{"name":"ArgParser","refId":"args/ArgParser"},"id":"args","name":"args","kind":"param"}],"kind":"constructor","line":"58"}],"kind":"class","comment":"\nTakes an [ArgParser] and generates a string of usage (i.e. help) text for its\ndefined options. Internally, it works like a tabular printer. The output is\ndivided into three horizontal columns, like so:\n\n    -h, --help  Prints the usage information\n    |  |        |                                 |\n\nIt builds the usage text up one column at a time and handles padding with\nspaces and wrapping to the next line to keep the cells correctly lined up.\n","line":"22"}],"uri":"package:args/src/usage.dart","kind":"library","line":"5"}