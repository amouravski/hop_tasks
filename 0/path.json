{"dependencies":[{"id":"dart.core","name":"dart:core","children":[{"id":"Object","name":"Object","children":[{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"==1()","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"kind":"method","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","line":"29"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","comment":"\nReturns a string representation of this object.\n","line":"48"},{"id":"noSuchMethod1()","name":"noSuchMethod","children":[{"ref":{"name":"InvocationMirror","refId":"dart.core/InvocationMirror"},"id":"invocation","name":"invocation","kind":"param"}],"kind":"method","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [InvocationMirror].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"hashCode","name":"hashCode","kind":"property","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"43"},{"ref":{"name":"Type","refId":"dart.core/Type"},"id":"runtimeType","name":"runtimeType","kind":"property","comment":"\nA representation of the runtime type of the object.\n","line":"65"},{"id":"Object0()","name":"Object","kind":"constructor","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"file:///usr/local/google/home/amouravski/dart-integration/dart-sdk//lib/core/object.dart","kind":"class","comment":"\nEverything in Dart is an [Object].\n","line":"10"}],"uri":"file:///usr/local/google/home/amouravski/dart-integration/dart-sdk//lib/core/core.dart","kind":"library","line":"5"}],"id":"path","name":"package:pathos/path.dart","children":[{"id":"_validateArgList2()","name":"_validateArgList","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"method","name":"method","kind":"param"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"id":"args","name":"args","kind":"param"}],"kind":"method","comment":"Validates that there are no non-null arguments following a null one and\nthrows an appropriate [ArgumentError] on failure.","isPrivate":true,"line":"185"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"withoutExtension1()","name":"withoutExtension","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Removes a trailing extension from the last part of [path].\n\n    withoutExtension('path/to/foo.dart'); // -> 'path/to/foo'","line":"181"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"relative2()","name":"relative","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"id":"from","name":"from","kind":"param"}],"kind":"method","comment":"Attempts to convert [path] to an equivalent relative path from the current\ndirectory.\n\n    // Given current directory is /root/path:\n    path.relative('/root/path/a/b.dart'); // -> 'a/b.dart'\n    path.relative('/root/other.dart'); // -> '../other.dart'\n\nIf the [from] argument is passed, [path] is made relative to that instead.\n\n    path.relative('/root/path/a/b.dart',\n        from: '/root/path'); // -> 'a/b.dart'\n    path.relative('/root/other.dart',\n        from: '/root/path'); // -> '../other.dart'\n\nSince there is no relative path from one drive letter to another on Windows,\nthis will return an absolute path in that case.\n\n    path.relative(r'D:\\other', from: r'C:\\home'); // -> 'D:\\other'","line":"175"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"normalize1()","name":"normalize","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Normalizes [path], simplifying it by handling `..`, and `.`, and\nremoving redundant path separators whenever possible.\n\n    path.normalize('path/./to/..//file.text'); // -> 'path/file.txt'","line":"155"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"id":"split1()","name":"split","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Splits [path] into its components using the current platform's [separator].\n\n    path.split('path/to/foo'); // -> ['path', 'to', 'foo']\n\nThe path will *not* be normalized before splitting.\n\n    path.split('path/../foo'); // -> ['path', '..', 'foo']\n\nIf [path] is absolute, the root directory will be the first element in the\narray. Example:\n\n    // Unix\n    path.split('/path/to/foo'); // -> ['/', 'path', 'to', 'foo']\n\n    // Windows\n    path.split(r'C:\\path\\to\\foo'); // -> [r'C:\\', 'path', 'to', 'foo']","line":"149"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"joinAll1()","name":"joinAll","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"String","refId":"dart.core/String"}]},"id":"parts","name":"parts","kind":"param"}],"kind":"method","comment":"Joins the given path parts into a single path using the current platform's\n[separator]. Example:\n\n    path.joinAll(['path', 'to', 'foo']); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    path.joinAll(['path/', 'to', 'foo']); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    path.joinAll(['path', '/to', 'foo']); // -> '/to/foo'\n\nFor a fixed number of parts, [join] is usually terser.","line":"130"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"join8()","name":"join","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"part1","name":"part1","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part2","name":"part2","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part3","name":"part3","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part4","name":"part4","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part5","name":"part5","kind":"param","line":"112"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part6","name":"part6","kind":"param","line":"112"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part7","name":"part7","kind":"param","line":"112"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part8","name":"part8","kind":"param","line":"112"}],"kind":"method","comment":"Joins the given path parts into a single path using the current platform's\n[separator]. Example:\n\n    path.join('path', 'to', 'foo'); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    path.join('path/', 'to', 'foo'); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    path.join('path', '/to', 'foo'); // -> '/to/foo'","line":"111"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"isRelative1()","name":"isRelative","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Returns `true` if [path] is a relative path and `false` if it is absolute.\nOn POSIX systems, absolute paths start with a `/` (forward slash). On\nWindows, an absolute path starts with `\\\\`, or a drive letter followed by\n`:/` or `:\\`.","line":"96"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"isAbsolute1()","name":"isAbsolute","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Returns `true` if [path] is an absolute path and `false` if it is a\nrelative path. On POSIX systems, absolute paths start with a `/` (forward\nslash). On Windows, an absolute path starts with `\\\\`, or a drive letter\nfollowed by `:/` or `:\\`.","line":"90"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"rootPrefix1()","name":"rootPrefix","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Returns the root of [path], if it's absolute, or the empty string if it's\nrelative.\n\n    // Unix\n    path.rootPrefix('path/to/foo'); // -> ''\n    path.rootPrefix('/path/to/foo'); // -> '/'\n\n    // Windows\n    path.rootPrefix(r'path\\to\\foo'); // -> ''\n    path.rootPrefix(r'C:\\path\\to\\foo'); // -> r'C:\\'","line":"84"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"extension1()","name":"extension","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Gets the file extension of [path]: the portion of [basename] from the last\n`.` to the end (including the `.` itself).\n\n    path.extension('path/to/foo.dart');    // -> '.dart'\n    path.extension('path/to/foo');         // -> ''\n    path.extension('path.to/foo');         // -> ''\n    path.extension('path/to/foo.dart.js'); // -> '.js'\n\nIf the file name starts with a `.`, then that is not considered the\nextension:\n\n    path.extension('~/.bashrc');    // -> ''\n    path.extension('~/.notes.txt'); // -> '.txt'","line":"71"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"dirname1()","name":"dirname","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Gets the part of [path] before the last separator.\n\n    path.dirname('path/to/foo.dart'); // -> 'path/to'\n    path.dirname('path/to');          // -> 'to'\n\nTrailing separators are ignored.\n\n    builder.dirname('path/to/'); // -> 'path'","line":"56"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"basenameWithoutExtension1()","name":"basenameWithoutExtension","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Gets the part of [path] after the last separator, and without any trailing\nfile extension.\n\n    path.basenameWithoutExtension('path/to/foo.dart'); // -> 'foo'\n\nTrailing separators are ignored.\n\n    builder.basenameWithoutExtension('path/to/foo.dart/'); // -> 'foo'","line":"45"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"basename1()","name":"basename","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Gets the part of [path] after the last separator.\n\n    path.basename('path/to/foo.dart'); // -> 'foo.dart'\n    path.basename('path/to');          // -> 'to'\n\nTrailing separators are ignored.\n\n    builder.basename('path/to/'); // -> 'to'","line":"35"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"absolute1()","name":"absolute","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Converts [path] to an absolute path by resolving it relative to the current\nworking directory. If [path] is already an absolute path, just returns it.\n\n    path.absolute('foo/bar.txt'); // -> /your/current/dir/foo/bar.txt","line":"25"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"separator0()","name":"separator","kind":"method","comment":"Gets the path separator for the current platform. On Mac and Linux, this\nis `/`. On Windows, it's `\\`.","line":"19"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"current0()","name":"current","kind":"method","comment":"Gets the path to the current working directory.","line":"15"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"separator","name":"separator","kind":"property","comment":"Gets the path separator for the current platform. On Mac and Linux, this\nis `/`. On Windows, it's `\\`.","line":"19"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"current","name":"current","kind":"property","comment":"Gets the path to the current working directory.","line":"15"},{"isFinal":true,"id":"_builder","name":"_builder","kind":"variable","comment":"An internal builder for the current OS so we can provide a straight\nfunctional interface and not require users to create one.","isPrivate":true,"line":"12"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"_ParsedPath","name":"_ParsedPath","children":[{"returnType":{"name":"void","refId":"void"},"id":"removeTrailingSeparators0()","name":"removeTrailingSeparators","kind":"method","line":"651"},{"returnType":{"name":"void","refId":"void"},"id":"normalize0()","name":"normalize","kind":"method","line":"659"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","line":"703"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"id":"_splitExtension0()","name":"_splitExtension","kind":"method","comment":"Splits the last part of the path into a two-element list. The first is\nthe name of the file without any extension. The second is the extension\nor \"\" if it has none.","isPrivate":true,"line":"717"},{"returnType":{"name":"_ParsedPath","refId":"path/_ParsedPath"},"id":"clone0()","name":"clone","kind":"method","line":"732"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"extension","name":"extension","kind":"property","comment":"The file extension of the last part, or \"\" if it doesn't have one.","line":"630"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isAbsolute","name":"isAbsolute","kind":"property","comment":"`true` if this is an absolute path.","line":"633"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"basename","name":"basename","kind":"property","line":"637"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"basenameWithoutExtension","name":"basenameWithoutExtension","kind":"property","line":"644"},{"ref":{"name":"Style","refId":"path/Style"},"id":"style","name":"style","kind":"variable","comment":"The [Style] that was used to parse this path.","line":"613"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"root","name":"root","kind":"variable","comment":"The absolute root portion of the path, or `null` if the path is relative.\nOn POSIX systems, this will be `null` or \"/\". On Windows, it can be\n`null`, \"//\" for a UNC path, or something like \"C:\\\" for paths with drive\nletters.","line":"619"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"id":"parts","name":"parts","kind":"variable","comment":"The path-separated parts of the path. All but the last will be\ndirectories.","line":"623"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"id":"separators","name":"separators","kind":"variable","comment":"The path separators following each part. The last one will be an empty\nstring unless the path ends with a trailing separator.","line":"627"},{"id":"_ParsedPath4()","name":"_ParsedPath","children":[{"initializedField":{"name":"style","refId":"path/_ParsedPath/style"},"ref":{"name":"Style","refId":"path/Style"},"id":"style","name":"style","kind":"param"},{"initializedField":{"name":"root","refId":"path/_ParsedPath/root"},"ref":{"name":"String","refId":"dart.core/String"},"id":"root","name":"root","kind":"param"},{"initializedField":{"name":"parts","refId":"path/_ParsedPath/parts"},"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"id":"parts","name":"parts","kind":"param"},{"initializedField":{"name":"separators","refId":"path/_ParsedPath/separators"},"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"id":"separators","name":"separators","kind":"param"}],"kind":"constructor","line":"635"}],"kind":"class","isPrivate":true,"line":"611"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Style","name":"Style","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"id":"getRoot1()","name":"getRoot","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Gets the root prefix of [path] if path is absolute. If [path] is relative,\nreturns `null`.","line":"601"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","line":"607"},{"isFinal":true,"isStatic":true,"id":"posix","name":"posix","kind":"variable","comment":"POSIX-style paths use \"/\" (forward slash) as separators. Absolute paths\nstart with \"/\". Used by UNIX, Linux, Mac OS X, and others.","line":"567"},{"isFinal":true,"isStatic":true,"id":"windows","name":"windows","kind":"variable","comment":"Windows paths use \"\\\" (backslash) as separators. Absolute paths start with\na drive letter followed by a colon (example, \"C:\") or two backslashes\n(\"\\\\\") for UNC paths.","line":"574"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"name","name":"name","kind":"variable","comment":"The name of this path style. Will be \"posix\" or \"windows\".","line":"583"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"separator","name":"separator","kind":"variable","comment":"The path separator for this style. On POSIX, this is `/`. On Windows,\nit's `\\`.","line":"587"},{"isFinal":true,"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"id":"separatorPattern","name":"separatorPattern","kind":"variable","comment":"The [Pattern] that can be used to match a separator for a path in this\nstyle. Windows allows both \"/\" and \"\\\" as path separators even though\n\"\\\" is the canonical one.","line":"592"},{"isFinal":true,"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"id":"_rootPattern","name":"_rootPattern","kind":"variable","comment":"The [RegExp] that can be used to match the root prefix of an absolute\npath in this style.","isPrivate":true,"line":"597"},{"id":"Style._4()","name":"Style._","children":[{"initializedField":{"name":"name","refId":"path/Style/name"},"ref":{"name":"String","refId":"dart.core/String"},"id":"name","name":"name","kind":"param"},{"initializedField":{"name":"separator","refId":"path/Style/separator"},"ref":{"name":"String","refId":"dart.core/String"},"id":"separator","name":"separator","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"separatorPattern","name":"separatorPattern","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"rootPattern","name":"rootPattern","kind":"param","line":"578"}],"kind":"constructor","isPrivate":true,"line":"577"}],"kind":"class","comment":"An enum type describing a \"flavor\" of path.","line":"564"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Builder","name":"Builder","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"id":"basename1()","name":"basename","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Gets the part of [path] after the last separator on the builder's\nplatform.\n\n    builder.basename('path/to/foo.dart'); // -> 'foo.dart'\n    builder.basename('path/to');          // -> 'to'\n\nTrailing separators are ignored.\n\n    builder.basename('path/to/'); // -> 'to'","line":"249"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"basenameWithoutExtension1()","name":"basenameWithoutExtension","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Gets the part of [path] after the last separator on the builder's\nplatform, and without any trailing file extension.\n\n    builder.basenameWithoutExtension('path/to/foo.dart'); // -> 'foo'\n\nTrailing separators are ignored.\n\n    builder.basenameWithoutExtension('path/to/foo.dart/'); // -> 'foo'","line":"259"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"dirname1()","name":"dirname","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Gets the part of [path] before the last separator.\n\n    builder.dirname('path/to/foo.dart'); // -> 'path/to'\n    builder.dirname('path/to');          // -> 'path'\n\nTrailing separators are ignored.\n\n    builder.dirname('path/to/'); // -> 'path'","line":"270"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"extension1()","name":"extension","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Gets the file extension of [path]: the portion of [basename] from the last\n`.` to the end (including the `.` itself).\n\n    builder.extension('path/to/foo.dart'); // -> '.dart'\n    builder.extension('path/to/foo'); // -> ''\n    builder.extension('path.to/foo'); // -> ''\n    builder.extension('path/to/foo.dart.js'); // -> '.js'\n\nIf the file name starts with a `.`, then it is not considered an\nextension:\n\n    builder.extension('~/.bashrc');    // -> ''\n    builder.extension('~/.notes.txt'); // -> '.txt'","line":"296"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"rootPrefix1()","name":"rootPrefix","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Returns the root of [path], if it's absolute, or an empty string if it's\nrelative.\n\n    // Unix\n    builder.rootPrefix('path/to/foo'); // -> ''\n    builder.rootPrefix('/path/to/foo'); // -> '/'\n\n    // Windows\n    builder.rootPrefix(r'path\\to\\foo'); // -> ''\n    builder.rootPrefix(r'C:\\path\\to\\foo'); // -> r'C:\\'","line":"309"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"isAbsolute1()","name":"isAbsolute","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Returns `true` if [path] is an absolute path and `false` if it is a\nrelative path. On POSIX systems, absolute paths start with a `/` (forward\nslash). On Windows, an absolute path starts with `\\\\`, or a drive letter\nfollowed by `:/` or `:\\`.","line":"318"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"isRelative1()","name":"isRelative","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Returns `true` if [path] is a relative path and `false` if it is absolute.\nOn POSIX systems, absolute paths start with a `/` (forward slash). On\nWindows, an absolute path starts with `\\\\`, or a drive letter followed by\n`:/` or `:\\`.","line":"324"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"join8()","name":"join","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"part1","name":"part1","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part2","name":"part2","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part3","name":"part3","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part4","name":"part4","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part5","name":"part5","kind":"param","line":"340"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part6","name":"part6","kind":"param","line":"340"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part7","name":"part7","kind":"param","line":"340"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part8","name":"part8","kind":"param","line":"340"}],"kind":"method","comment":"Joins the given path parts into a single path. Example:\n\n    builder.join('path', 'to', 'foo'); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    builder.join('path/', 'to', 'foo'); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    builder.join('path', '/to', 'foo'); // -> '/to/foo'\n","line":"339"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"joinAll1()","name":"joinAll","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"String","refId":"dart.core/String"}]},"id":"parts","name":"parts","kind":"param"}],"kind":"method","comment":"Joins the given path parts into a single path. Example:\n\n    builder.joinAll(['path', 'to', 'foo']); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    builder.joinAll(['path/', 'to', 'foo']); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    builder.joinAll(['path', '/to', 'foo']); // -> '/to/foo'\n\nFor a fixed number of parts, [join] is usually terser.","line":"360"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"id":"split1()","name":"split","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Splits [path] into its components using the current platform's\n[separator]. Example:\n\n    builder.split('path/to/foo'); // -> ['path', 'to', 'foo']\n\nThe path will *not* be normalized before splitting.\n\n    builder.split('path/../foo'); // -> ['path', '..', 'foo']\n\nIf [path] is absolute, the root directory will be the first element in the\narray. Example:\n\n    // Unix\n    builder.split('/path/to/foo'); // -> ['/', 'path', 'to', 'foo']\n\n    // Windows\n    builder.split(r'C:\\path\\to\\foo'); // -> [r'C:\\', 'path', 'to', 'foo']","line":"406"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"normalize1()","name":"normalize","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Normalizes [path], simplifying it by handling `..`, and `.`, and\nremoving redundant path separators whenever possible.\n\n    builder.normalize('path/./to/..//file.text'); // -> 'path/file.txt'","line":"419"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"resolve7()","name":"resolve","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"part1","name":"part1","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part2","name":"part2","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part3","name":"part3","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part4","name":"part4","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part5","name":"part5","kind":"param","line":"433"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part6","name":"part6","kind":"param","line":"433"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"part7","name":"part7","kind":"param","line":"433"}],"kind":"method","comment":"Creates a new path by appending the given path parts to the [root].\nEquivalent to [join()] with [root] as the first argument. Example:\n\n    var builder = new Builder(root: 'root');\n    builder.resolve('path', 'to', 'foo'); // -> 'root/path/to/foo'","line":"432"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"relative2()","name":"relative","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"id":"from","name":"from","kind":"param"}],"kind":"method","comment":"Attempts to convert [path] to an equivalent relative path relative to\n[root].\n\n    var builder = new Builder(root: '/root/path');\n    builder.relative('/root/path/a/b.dart'); // -> 'a/b.dart'\n    builder.relative('/root/other.dart'); // -> '../other.dart'\n\nIf the [from] argument is passed, [path] is made relative to that instead.\n\n    builder.relative('/root/path/a/b.dart',\n        from: '/root/path'); // -> 'a/b.dart'\n    builder.relative('/root/other.dart',\n        from: '/root/path'); // -> '../other.dart'\n\nSince there is no relative path from one drive letter to another on\nWindows, this will return an absolute path in that case.\n\n    builder.relative(r'D:\\other', from: r'C:\\other'); // -> 'D:\\other'\n\nThis will also return an absolute path if an absolute [path] is passed to\na builder with a relative [root].\n\n    var builder = new Builder(r'some/relative/path');\n    builder.relative(r'/absolute/path'); // -> '/absolute/path'","line":"461"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"withoutExtension1()","name":"withoutExtension","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","comment":"Removes a trailing extension from the last part of [path].\n\n    builder.withoutExtension('path/to/foo.dart'); // -> 'path/to/foo'","line":"523"},{"returnType":{"name":"_ParsedPath","refId":"path/_ParsedPath"},"id":"_parse1()","name":"_parse","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"path","name":"path","kind":"param"}],"kind":"method","isPrivate":true,"line":"536"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"separator","name":"separator","kind":"property","comment":"Gets the path separator for the builder's [style]. On Mac and Linux,\nthis is `/`. On Windows, it's `\\`.","line":"238"},{"isFinal":true,"ref":{"name":"Style","refId":"path/Style"},"id":"style","name":"style","kind":"variable","comment":"The style of path that this builder works with.","line":"231"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"root","name":"root","kind":"variable","comment":"The root directory that relative paths will be relative to.","line":"234"},{"id":"Builder2()","name":"Builder","children":[{"ref":{"name":"Style","refId":"path/Style"},"isNamed":true,"isOptional":true,"id":"style","name":"style","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"id":"root","name":"root","kind":"param"}],"kind":"constructor","comment":"Creates a new path builder for the given style and root directory.\n\nIf [style] is omitted, it uses the host operating system's path style. If\n[root] is omitted, it defaults to the current working directory. If [root]\nis relative, it is considered relative to the current working directory.","line":"214"},{"id":"Builder._2()","name":"Builder._","children":[{"initializedField":{"name":"style","refId":"path/Builder/style"},"ref":{"name":"Style","refId":"path/Style"},"id":"style","name":"style","kind":"param"},{"initializedField":{"name":"root","refId":"path/Builder/root"},"ref":{"name":"String","refId":"dart.core/String"},"id":"root","name":"root","kind":"param"}],"kind":"constructor","isPrivate":true,"line":"228"}],"kind":"class","comment":"An instantiable class for manipulating paths. Unlike the top-level\nfunctions, this lets you explicitly select what platform the paths will use.","line":"208"}],"uri":"package:pathos/path.dart","kind":"library","comment":"A comprehensive, cross-platform path manipulation library.","line":"6"}