{"dependencies":[{"id":"dart.core","name":"dart:core","children":[{"id":"Object","name":"Object","children":[{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"==1()","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"kind":"method","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","line":"29"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","comment":"\nReturns a string representation of this object.\n","line":"48"},{"id":"noSuchMethod1()","name":"noSuchMethod","children":[{"ref":{"name":"InvocationMirror","refId":"dart.core/InvocationMirror"},"id":"invocation","name":"invocation","kind":"param"}],"kind":"method","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [InvocationMirror].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"hashCode","name":"hashCode","kind":"property","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"43"},{"ref":{"name":"Type","refId":"dart.core/Type"},"id":"runtimeType","name":"runtimeType","kind":"property","comment":"\nA representation of the runtime type of the object.\n","line":"65"},{"id":"Object0()","name":"Object","kind":"constructor","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"file:///usr/local/google/home/amouravski/dart-integration/dart-sdk//lib/core/object.dart","kind":"class","comment":"\nEverything in Dart is an [Object].\n","line":"10"}],"uri":"file:///usr/local/google/home/amouravski/dart-integration/dart-sdk//lib/core/core.dart","kind":"library","line":"5"}],"id":"args.src.parser","name":"package:args/src/parser.dart","children":[{"isFinal":true,"id":"_LONG_OPT","name":"_LONG_OPT","kind":"variable","isPrivate":true,"line":"11"},{"isFinal":true,"id":"_ABBR_OPT","name":"_ABBR_OPT","kind":"variable","isPrivate":true,"line":"10"},{"isFinal":true,"id":"_SOLO_OPT","name":"_SOLO_OPT","kind":"variable","isPrivate":true,"line":"9"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Parser","name":"Parser","children":[{"returnType":{"name":"ArgResults","refId":"args/ArgResults"},"id":"parse0()","name":"parse","kind":"method","comment":"Parses the arguments. This can only be called once. ","line":"46"},{"returnType":{"name":"void","refId":"void"},"id":"readNextArgAsValue1()","name":"readNextArgAsValue","children":[{"ref":{"name":"Option","refId":"args/Option"},"id":"option","name":"option","kind":"param"}],"kind":"method","comment":"\nPulls the value for [option] from the second argument in [args]. Validates\nthat there is a valid value there.\n","line":"107"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"parseSoloOption0()","name":"parseSoloOption","kind":"method","comment":"\nTries to parse the current argument as a \"solo\" option, which is a single\nhyphen followed by a single letter. We treat this differently than\ncollapsed abbreviations (like \"-abc\") to handle the possible value that\nmay follow it.\n","line":"126"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"parseAbbreviation1()","name":"parseAbbreviation","children":[{"ref":{"name":"Parser","refId":"args.src.parser/Parser"},"id":"innermostCommand","name":"innermostCommand","kind":"param"}],"kind":"method","comment":"\nTries to parse the current argument as a series of collapsed abbreviations\n(like \"-abc\") or a single abbreviation with the value directly attached\nto it (like \"-mrelease\").\n","line":"154"},{"returnType":{"name":"void","refId":"void"},"id":"parseShortFlag1()","name":"parseShortFlag","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"c","name":"c","kind":"param"}],"kind":"method","line":"193"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"parseLongOption0()","name":"parseLongOption","kind":"method","comment":"\nTries to parse the current argument as a long-form named option, which\nmay include a value like \"--mode=release\" or \"--mode release\".\n","line":"215"},{"id":"validate2()","name":"validate","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"condition","name":"condition","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","comment":"\nCalled during parsing to validate the arguments. Throws a\n[FormatException] if [condition] is `false`.\n","line":"263"},{"id":"setOption3()","name":"setOption","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"id":"results","name":"results","kind":"param"},{"ref":{"name":"Option","refId":"args/Option"},"id":"option","name":"option","kind":"param"},{"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"Validates and stores [value] as the value for [option]. ","line":"268"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"current","name":"current","kind":"property","comment":"The current argument being parsed. ","line":"43"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"commandName","name":"commandName","kind":"variable","comment":"\nIf parser is parsing a command's options, this will be the name of the\ncommand. For top-level results, this returns `null`.\n","line":"23"},{"isFinal":true,"ref":{"name":"Parser","refId":"args.src.parser/Parser"},"id":"parent","name":"parent","kind":"variable","comment":"\nThe parser for the supercommand of this command parser, or `null` if this\nis the top-level parser.\n","line":"29"},{"isFinal":true,"ref":{"name":"ArgParser","refId":"args/ArgParser"},"id":"grammar","name":"grammar","kind":"variable","comment":"The grammar being parsed. ","line":"32"},{"isFinal":true,"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"id":"args","name":"args","kind":"variable","comment":"The arguments being parsed. ","line":"35"},{"isFinal":true,"ref":{"name":"Map","refId":"dart.core/Map"},"id":"results","name":"results","kind":"variable","comment":"The accumulated parsed options. ","line":"38"},{"id":"Parser4()","name":"Parser","children":[{"initializedField":{"name":"commandName","refId":"args.src.parser/Parser/commandName"},"ref":{"name":"String","refId":"dart.core/String"},"id":"commandName","name":"commandName","kind":"param"},{"initializedField":{"name":"grammar","refId":"args.src.parser/Parser/grammar"},"ref":{"name":"ArgParser","refId":"args/ArgParser"},"id":"grammar","name":"grammar","kind":"param"},{"initializedField":{"name":"args","refId":"args.src.parser/Parser/args"},"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"id":"args","name":"args","kind":"param"},{"initializedField":{"name":"parent","refId":"args.src.parser/Parser/parent"},"ref":{"name":"Parser","refId":"args.src.parser/Parser"},"isOptional":true,"id":"parent","name":"parent","kind":"param"}],"kind":"constructor","line":"40"}],"kind":"class","comment":"\nThe actual parsing class. Unlike [ArgParser] which is really more an \"arg\ngrammar\", this is the class that does the parsing and holds the mutable\nstate required during a parse.\n","line":"18"}],"uri":"package:args/src/parser.dart","kind":"library","line":"5"}